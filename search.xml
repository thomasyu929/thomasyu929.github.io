<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Promise/A+ - implementation</title>
      <link href="/2022/01/11/Promise-implementation/"/>
      <url>/2022/01/11/Promise-implementation/</url>
      
        <content type="html"><![CDATA[<blockquote><p>A <em>promise</em> represents the eventual result of an asynchronous operation. The primary way of interacting with a promise is through its <code>then</code> method, which registers callbacks to receive either a promise’s eventual value or the reason why the promise cannot be fulfilled.</p></blockquote><h2 id="Before-Start"><a href="#Before-Start" class="headerlink" title="Before Start"></a>Before Start</h2><p><em>Promise/A+ specification:</em> <a href="https://github.com/promises-aplus/promises-spec">https://github.com/promises-aplus/promises-spec</a></p><p><em>Promise/A+ test suite:</em> <a href="https://github.com/promises-aplus/promises-tests">https://github.com/promises-aplus/promises-tests</a></p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h3><blockquote><ol><li>“promise” is an object or function with a <code>then</code> method whose behavior conforms to this specification.</li><li>“thenable” is an object or function that defines a <code>then</code> method.</li><li>“value” is any legal JavaScript value (including <code>undefined</code>, a thenable, or a promise).</li><li>“exception” is a value that is thrown using the <code>throw</code> statement.</li><li>“reason” is a value that indicates why a promise was rejected.</li></ol></blockquote><h3 id="Promise-State"><a href="#Promise-State" class="headerlink" title="Promise State"></a>Promise State</h3><p>A promise must be in one of three states: <code>pending</code>, <code>fulfilled</code>, or <code>rejected</code>.</p><p><code>fulfilled</code> state need have an immutable <code>value</code>, <code>rejected</code> state need have an immutable <code>reason</code>.</p><p><em>Note:</em> <code>immutable</code> means <code>===</code>, object only require reference not changed.</p><h3 id="Then"><a href="#Then" class="headerlink" title="Then"></a>Then</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Promise.then(onFulfilled, onRejected);</code></pre><p>Both of them are optional, if they are not function, must be ignored.</p><p><code>then</code> will return <code>Promise</code> object.</p><h3 id="Promise-example"><a href="#Promise-example" class="headerlink" title="Promise example"></a>Promise example</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">const promise &#x3D; new Promise(function(resolve, reject) &#123;  &#x2F;&#x2F; ... some code  if (&#x2F;*async success*&#x2F;)&#123;  resolve(value);      &#125; else &#123;reject(error);                        &#125;&#125;);promise.then(function(value) &#123;  &#x2F;&#x2F; success&#125;, function(error) &#123;  &#x2F;&#x2F; failuresame as Promise.prototype.catch()&#125;);</code></pre><hr><h2 id="Implementation-based-on-Promise-A"><a href="#Implementation-based-on-Promise-A" class="headerlink" title="Implementation based on Promise/A+"></a>Implementation based on Promise/A+</h2><p>源码：<a href="https://github.com/thomasyu929/leetcode-ui/blob/master/js-problems/_Promise/_Promise.js">https://github.com/thomasyu929/leetcode-ui/blob/master/js-problems/_Promise/_Promise.js</a></p><h4 id="Related-Promise-methods"><a href="#Related-Promise-methods" class="headerlink" title="Related Promise methods"></a>Related Promise methods</h4><p>TODO - See above link for now.</p><ul><li><input checked="" disabled="" type="checkbox"> _Promise.resolve</li><li><input checked="" disabled="" type="checkbox"> _Promise.reject</li><li><input checked="" disabled="" type="checkbox"> _Promise.prototype.catch</li><li><input checked="" disabled="" type="checkbox"> _Promise.prototype.finally</li><li><input checked="" disabled="" type="checkbox"> _Promise.all</li><li><input checked="" disabled="" type="checkbox"> _Promise.allSettled</li><li><input checked="" disabled="" type="checkbox"> _Promise.any</li><li><input checked="" disabled="" type="checkbox"> _Promise.race</li></ul>]]></content>
      
      
      <categories>
          
          <category> experience </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Welcome to Peomas</title>
      <link href="/2022/01/06/Welcome-to-Peomas/"/>
      <url>/2022/01/06/Welcome-to-Peomas/</url>
      
        <content type="html"><![CDATA[<h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li>Github style markdown</li><li>Local search</li><li>Tags support</li><li>Categories support</li><li>Responsive layout</li><li>About personal page</li><li>Pagination</li></ul><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ git clone https:&#x2F;&#x2F;github.com&#x2F;thomasyu929&#x2F;hexo-theme-peomas.git</code></pre><p>Set the theme to <code>hexo-theme-peomas</code> in the <code>_config.yml</code> which in the root path.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;theme: hexo-theme-peomas</code></pre><h4 id="About-Page"><a href="#About-Page" class="headerlink" title="About Page"></a>About Page</h4><p>About page needs to be created by manually.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new page about</code></pre><p>Then, open <code>/source/about/index.md</code> which in your blog directory. Add <code>layout</code> property.</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">---title: aboutlayout: about---Add content for this markdown, this content will show on about page.</code></pre><h4 id="Category-Page"><a href="#Category-Page" class="headerlink" title="Category Page"></a>Category Page</h4><p>Category page needs to be created by manually.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new page category</code></pre><p>Then, open <code>/source/category/index.md</code> which in your blog directory. Add <code>layout</code> property.</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">---title: aboutlayout: category---</code></pre><h4 id="Tag-Page"><a href="#Tag-Page" class="headerlink" title="Tag Page"></a>Tag Page</h4><p>Tag page needs to be created by manually.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new page tag</code></pre><p>Then, open <code>/source/tag/index.md</code> which in your blog directory. Add <code>layout</code> property.</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">---title: aboutlayout: tag---</code></pre><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><h4 id="Favicon"><a href="#Favicon" class="headerlink" title="Favicon"></a>Favicon</h4><p>Favicon can replace in the theme’s <code>_config.yml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">favicon: &#x2F;img&#x2F;favicon.png</code></pre><p>Also have to replace the file in the <code>theme/source/img</code>.</p><h4 id="Logo-Mark"><a href="#Logo-Mark" class="headerlink" title="Logo Mark"></a>Logo Mark</h4><p>Logo Mark which in the left of the navigation can be customized.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># Logo Markmark: Peomaslogo_mark: null</code></pre><p>Default only show mark, just text mark. Can add path for <code>logo_mark</code> , that way will show the logo pic.</p><h4 id="Scroll-To-Top-Button"><a href="#Scroll-To-Top-Button" class="headerlink" title="Scroll To Top Button"></a>Scroll To Top Button</h4><p>Scroll button can be disabled by set to false in <code>_config.yml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># Scroll buttonscroll_top_btn:  enable: true</code></pre><h4 id="NProgress-Bar"><a href="#NProgress-Bar" class="headerlink" title="NProgress Bar"></a>NProgress Bar</h4><p>NProgress can be disabled or change bar color in <code>_config.yml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># NProgressnprogress:   enable: true  color: &quot;#131313&quot;</code></pre><h4 id="Menu"><a href="#Menu" class="headerlink" title="Menu"></a>Menu</h4><p>The menu is configured in the theme’s <code>_config.yml</code>.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># Navigation menumenu:  Home: &#x2F;  Archives: &#x2F;archives  Category: &#x2F;categories  Tag: &#x2F;tags  About: &#x2F;about</code></pre><h4 id="Index-Page"><a href="#Index-Page" class="headerlink" title="Index Page"></a>Index Page</h4><p>The index page related settings are configured in the theme’s <code>_config.yml</code>.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># Index Page configindex:  enable_sticky: true  post_url_target: _self  enable_category: true  enable_tag: true</code></pre><h4 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h4><p>Table of contents was generated based on <code>Tocbot</code>. It can be disabled in <code>_config.yml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># Post Page configtoc:  enable: true</code></pre><h4 id="About-Page-1"><a href="#About-Page-1" class="headerlink" title="About Page"></a>About Page</h4><p>The about page related settings are configured in the theme’s <code>_config.yml</code>.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">about:  avatar:     enable: true    link: &#x2F;img&#x2F;avatar.png  title: Thomas Yu  subTitle: Front-End Developer - Labcorp  icon:  - &#123; class: &quot;fab fa-github&quot;, url: &quot;https:&#x2F;&#x2F;github.com&#x2F;thomasyu929&quot;, info: &quot;Thomas Yu&#39;s Github&quot; &#125;  - &#123; class: &quot;fas fa-envelope&quot;, url: &quot;mailto:yby4301955@gmail.com&quot;, info: &quot;Mail to me&quot; &#125;  - &#123; class: &quot;fab fa-linkedin&quot;, url: &quot;https:&#x2F;&#x2F;linkedin.com&quot;, info: &quot;LinkedIn&quot; &#125;  - &#123; class: &quot;fas fa-rss&quot;, url: &quot;&#x2F;atom.xml&quot;, info: &quot;Subscribe Thomas&#39;s blog&quot;&#125;</code></pre><h4 id="Tag-Page-1"><a href="#Tag-Page-1" class="headerlink" title="Tag Page"></a>Tag Page</h4><p>The tag page was generated by <code>tagcloud</code> automatically. <code>tagcloud</code> related settings are configured in the theme’s <code>_config.yml</code>.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># Tag Page configtagcloud:  min_font: 15  max_font: 30  unit: px  start_color: &quot;#337ab7&quot;  end_color: &quot;#0d6efd&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Theme Settings </category>
          
      </categories>
      
      
        <tags>
            
            <tag> theme </tag>
            
            <tag> markdown </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front Matter</title>
      <link href="/2022/01/03/front-matter/"/>
      <url>/2022/01/03/front-matter/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Front-matter is a block of YAML or JSON at the beginning of the file that is used to configure settings for your writings. Front-matter is terminated by three dashes when written in YAML or three semicolons when written in JSON.</p><p>— from <a href="https://hexo.io/docs/front-matter">Hexo site</a>.</p></blockquote><h4 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">---title: Hello Worlddate: 2013&#x2F;7&#x2F;13 20:46:25---</code></pre><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json">&quot;title&quot;: &quot;Hello World&quot;,&quot;date&quot;: &quot;2013&#x2F;7&#x2F;13 20:46:25&quot;</code></pre><br><h3 id="Settings-amp-Their-Default-Values"><a href="#Settings-amp-Their-Default-Values" class="headerlink" title="Settings &amp; Their Default Values"></a>Settings &amp; Their Default Values</h3><hr><table><thead><tr><th align="left">Setting</th><th>Type</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td align="left"><code>author</code></td><td><code>string</code></td><td>Author name for post copyright</td><td><code>author</code> in Hexo <code>_config.yml</code></td></tr><tr><td align="left"><code>title</code></td><td><code>string</code></td><td>Title</td><td>Filename (post only)</td></tr><tr><td align="left"><code>date</code></td><td><code>string</code></td><td>Pulished date</td><td>File created date</td></tr><tr><td align="left"><code>updated</code></td><td><code>string</code></td><td>Updated date</td><td>File updated date</td></tr><tr><td align="left"><code>comments</code></td><td><code>boolean</code></td><td>Enables comment feature for the post</td><td>true</td></tr><tr><td align="left"><code>tags</code></td><td><code>object</code></td><td></td><td>None</td></tr><tr><td align="left"><code>categories</code></td><td><code>string</code></td><td></td><td>None</td></tr><tr><td align="left"><code>permalink</code></td><td><code>string</code></td><td>Overrides the default permalink of the post. Permalink sould end with <code>/</code> or <code>.html</code></td><td>null</td></tr><tr><td align="left"><code>excerpt</code></td><td><code>string</code></td><td>Page excerpt in plain text. Use <a href="https://hexo.io/docs/tag-plugins#Post-Excerpt">this plugin</a> to format the text</td><td>None</td></tr><tr><td align="left"><code>disableNunjucks</code></td><td><code>boolean</code></td><td>Disable rendering of Nunjucks tag <code>&#123;&#123; &#125;&#125;</code>/<code>&#123;% %&#125;</code> and <a href="https://hexo.io/docs/tag-plugins">tag plugins</a> when enabled</td><td>false</td></tr><tr><td align="left"><code>lang</code></td><td><code>string</code></td><td>Set the language to override <a href="https://hexo.io/docs/internationalization#Path">auto-detection</a></td><td>Inherited from <code>_config.yml</code></td></tr><tr><td align="left"><code>post_link</code></td><td><code>string</code></td><td>Post link</td><td>None</td></tr><tr><td align="left"><code>description</code></td><td><code>string</code></td><td>Docs <a href="https://theme-next.js.org/docs/theme-settings/posts.html#Preamble-Text">here</a></td><td>None</td></tr><tr><td align="left"><code>direction</code></td><td><code>string</code></td><td>Avaliable value: <code>rtl</code></td><td>None</td></tr><tr><td align="left"><code>header</code></td><td><code>boolean</code></td><td>Whether to display the post header in index page</td><td><code>true</code></td></tr><tr><td align="left"><code>mathjax</code></td><td><code>boolean</code></td><td>MathJax support</td><td><code>math.every_page</code> in <code>_config.yml</code></td></tr><tr><td align="left"><code>sidebar</code></td><td><code>boolean</code></td><td>Whether the sidebar will be shown</td><td>Depends on <code>sidebar.display</code> in <code>_config.yml</code></td></tr><tr><td align="left"><code>copyright</code></td><td><code>boolean</code></td><td>Whether to display copyright notices below the post with <code>theme.creative_commons.license</code> and <code>theme.creative_commons.post</code> enabled</td><td><code>true</code></td></tr><tr><td align="left"><code>sticky</code></td><td><code>number</code></td><td>Pin the post to the top of the index page. <a href="https://github.com/hexojs/hexo-generator-index">hexo-generator-index</a> plugin required</td><td>0</td></tr></tbody></table><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">categories:  - Sports  - Baseballtags:  - Injury  - Fight  - Shockingtoc:  enable: true  number: false  max_depth: 3reward_settings:  enable: true  comment: Buy me a coffeequicklink:  enable: true  delay: true  timeout: 3000  priority: true</code></pre><h3 id="Undocumented-Front-matter-Variables"><a href="#Undocumented-Front-matter-Variables" class="headerlink" title="Undocumented Front-matter Variables"></a>Undocumented Front-matter Variables</h3><hr><table><thead><tr><th align="left">Setting</th><th>Type</th><th>Example</th></tr></thead><tbody><tr><td align="left"><code>link</code></td><td><code>string</code></td><td><a href="https://github.com/hexojs/hexo-theme-unit-test/blob/master/source/_posts/link-post.md">link-post</a></td></tr><tr><td align="left"><code>photos</code></td><td><code>array</code></td><td><a href="https://github.com/hexojs/hexo-theme-unit-test/blob/master/source/_posts/gallery-post.md">gallery-post</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Theme Settings </category>
          
      </categories>
      
      
        <tags>
            
            <tag> theme </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Understanding RxJS Operators: forkJoin, zip, combineLatest, and withLatestFrom</title>
      <link href="/2020/09/21/Understanding-RxJS-Operators/"/>
      <url>/2020/09/21/Understanding-RxJS-Operators/</url>
      
        <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>If you are confused about the differences between <code>forkJoin</code>, <code>zip</code>, <code>combineLatest</code>, and <code>withLatestFrom</code>, you are not alone.</p><blockquote><p>These four operators are what we know as <code>combination operators</code> - we use them when we need to <strong>join information from multiple observables</strong>.</p></blockquote><p>This article will talk about the usage and differences between these four operators, so you know which one to use when the time comes.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>Imagine you are <strong>printing t-shirts</strong>. Ms. Color holds the <code>color</code> information, and Mr. Logo holds the <code>logo</code> information. Both of them will pick <code>color</code> and <code>logo</code> spontaneously. You will need to wait and combine these two pieces of information continuously in order to print t-shirts. Ms. Color and Mr. Logo represent two observables in our code - <code>color$</code> and <code>logo$</code>.</p><p><img src="https://scotch-res.cloudinary.com/image/upload/q_auto:good,f_auto/media/272/qp101EyBRxabSGbqdDz2_10.png" alt="you, ms. color &amp; mr. logo"></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">&#x2F;&#x2F; 0. Import Rxjs operatorsimport &#123; forkJoin, zip, combineLatest, Subject &#125; from &#39;rxjs&#39;;import &#123; withLatestFrom, take, first &#125; from &#39;rxjs&#x2F;operators&#39;;&#x2F;&#x2F; 1. Define shirt color and logo optionstype Color &#x3D; &#39;white&#39; | &#39;green&#39; | &#39;red&#39; | &#39;blue&#39;;type Logo &#x3D; &#39;fish&#39; | &#39;dog&#39; | &#39;bird&#39; | &#39;cow&#39;;&#x2F;&#x2F; 2. Create the two persons - color and logo observables,&#x2F;&#x2F; They will communicate with us later (when we subscribe)const color$ &#x3D; new Subject&lt;Color&gt;();const logo$ &#x3D; new Subject&lt;Logo&gt;();&#x2F;&#x2F; 3. We are ready to start printing shirts. You need to subscribe to color and logo observables to produce shirts. We will write that code here later....&#x2F;&#x2F; 4. The two persons(observables) are doing their job, picking color and logocolor$.next(&#39;white&#39;);logo$.next(&#39;fish&#39;);color$.next(&#39;green&#39;);logo$.next(&#39;dog&#39;);color$.next(&#39;red&#39;);logo$.next(&#39;bird&#39;);color$.next(&#39;blue&#39;);&#x2F;&#x2F; 5. When the two persons (observables) have no more info, they say bye. We will write code here later....</code></pre><p>We created two observables by using <a href="https://rxjs-dev.firebaseapp.com/api/index/class/Subject">Subject</a>. For part 4 in the code, every <code>.next(&lt;value&gt;)</code> means Ms. Color or Mr. Logo is picking color or logo.</p><p>Take note of the sequence of information (part 4 in our code), here is the summary:</p><p><img src="https://scotch-res.cloudinary.com/image/upload/q_auto:good,f_auto/media/272/6C1OMCYRQwm2puCgTyXf_sequence.gif" alt="sequence of info"></p><pre class="line-numbers language-none"><code class="language-none">1. Ms. Color picks WHITE2. Mr. Logo picks FISH3. Ms. Color picks GREEN4. Mr. Logo picks DOG5. Ms. Color picks RED6. Mr. Logo picks BIRD7. Ms. Color picks BLUE</code></pre><p>Later, we will update our code (part 3 &amp; 5) to subscribe to both color and logo observables using the four different operators to see how the shirts are produced differently.</p><p>All set. Let’s start exploring our first operator!</p><h2 id="zip-the-love-birds-operator"><a href="#zip-the-love-birds-operator" class="headerlink" title="zip - the love birds operator"></a>zip - the love birds operator</h2><p>I call the <code>zip</code> operator the love birds operator. Love birds need to always be together.</p><p>Let’s replace our code (part 3) with below:</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">&#x2F;&#x2F; 3. We are ready to start printing shirt...zip(color$, logo$)    .subscribe(([color, logo]) &#x3D;&gt; console.log(&#96;$&#123;color&#125; shirt with $&#123;logo&#125;&#96;));</code></pre><h3 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h3><p>For those of you who are not familiar with JavaScript ES6/ES2015 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">destructuring assignment</a>, you might find the syntax in subscribe <code>[color, logo]</code> a little bit odd.</p><p>When we zip <code>color$</code> and <code>logo$</code>, we expect to receive an array of 2 items during <code>subscribe</code>, the first item is <code>color</code> and the second is <code>logo</code> (follow their orders in <code>zip</code> function).</p><p>The traditional way of writing it would be <code>.subscribe((data) =&gt; console.log(</code>${data[0]} shirt with ${data[1]}<code>))</code>. As you can see, it’s not very obvious that <code>data[0]</code> is color.</p><p>ES6 allows us to unpack the value from arrays. Therefore, we unpack <code>data</code> into <code>[color, logo]</code> straight away.</p><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p>Alright, let’s go back to our code and run it. The shirt printing result would be:</p><p><img src="https://scotch-res.cloudinary.com/image/upload/q_auto:good,f_auto/media/272/SYFLX4RmeFoUwjU2lxdQ_zip.gif" alt="zip - printed shirts"></p><p>Here is what gets logged to the console:</p><pre class="line-numbers language-none"><code class="language-none">1. white shirt with fish2. green shirt with dog3. red shirt with bird</code></pre><h3 id="How-does-zip-work"><a href="#How-does-zip-work" class="headerlink" title="How does zip work?"></a>How does <code>zip</code> work?</h3><p>Again, <code>zip</code> operator is the love birds operator. In our case, <code>color</code> will wait for <code>logo</code> whenever there are new values. Both values must change, then only the log gets triggered.</p><pre class="line-numbers language-none"><code class="language-none">1. Ms. Color picks WHITE2. Mr. Logo picks FISH &lt;- log 01, WHITE + FISH in pair, love birds!3. Ms. Color picks GREEN4. Mr. Logo picks DOG &lt;- log 02, GREEN + DOG in pair, love birds!5. Ms. Color picks RED6. Mr. Logo picks BIRD &lt;- log 03, RED + BIRD in pair love birds!7. Ms. Color picks BLUE &lt;- waiting for love...</code></pre><p><code>zip</code> operator can accept more than 2 observables - no matter how many observables, they must all wait for each other, no man left behind!</p><h2 id="combineLatest"><a href="#combineLatest" class="headerlink" title="combineLatest"></a>combineLatest</h2><p>I call <code>combineLatest</code> operator the independent operator. They are independent and don’t wait for each other.</p><p>Let’s replace the setup code part 3 with the below code:</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">&#x2F;&#x2F; 3. We are ready to start printing shirt...combineLatest(color$, logo$)    .subscribe(([color, logo]) &#x3D;&gt; console.log(&#96;$&#123;color&#125; shirt with $&#123;logo&#125;&#96;));</code></pre><p>The shirt printing result would be:</p><p><img src="https://scotch-res.cloudinary.com/image/upload/q_auto:good,f_auto/media/272/e5wyQseJR9CoQaOi0Kfw_combinelatest.gif" alt="combinedLatest - printed shirts"></p><p>Here is what get to log in the console:</p><pre class="line-numbers language-none"><code class="language-none">1. white shirt with fish2. green shirt with fish3. green shirt with dog4. red shirt with dog5. red shirt with bird6. blue shirt with bird</code></pre><h3 id="How-does-combineLatest-work"><a href="#How-does-combineLatest-work" class="headerlink" title="How does combineLatest work?"></a>How does <code>combineLatest</code> work?</h3><p>In our case, the first function is triggered after both <code>color</code> and <code>logo</code> values change. From there, either the <code>color</code> or <code>logo</code> value change will trigger the log.</p><pre class="line-numbers language-none"><code class="language-none">1. Ms. Color picks WHITE2. Mr. Logo picks FISH &lt;- log 01, color + logo first meet, let&#39;s go dutch!3. Ms. Color picks GREEN &lt;- log 02, GREEN + FISH4. Mr. Logo picks DOG &lt;- log 03, DOG + GREEN5. Ms. Color picks RED &lt;- log 04, RED + DOG6. Mr. Logo picks BIRD &lt;- log 05 BIRD + RED7. Ms. Color picks BLUE &lt;- log 06 BLUE + BIRD</code></pre><h2 id="withLatestFrom"><a href="#withLatestFrom" class="headerlink" title="withLatestFrom"></a>withLatestFrom</h2><p>I call <code>withLatestFrom</code> operator the primary/secondary operator. At first, the primary must meet the secondary. After that, the primary will take the lead, giving command. The secondary will follow.</p><p>Let’s replace the code in part 3 with the below code:</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">&#x2F;&#x2F; 3. We are ready to start printing shirt...color$.pipe(withLatestFrom(logo$))    .subscribe(([color, logo]) &#x3D;&gt; console.log(&#96;$&#123;color&#125; shirt with $&#123;logo&#125;&#96;));</code></pre><p>The shirt printing result would be:</p><p><img src="https://scotch-res.cloudinary.com/image/upload/q_auto:good,f_auto/media/272/MKm4pKfdSeoW5YjaTorj_withlatestfrom.gif" alt="withLatestFrom - printed shirts"></p><p>Here is what is logged to the console:</p><pre class="line-numbers language-none"><code class="language-none">1. green shirt with fish2. red shirt with dog3. blue shirt with bird</code></pre><h3 id="How-does-withLatestFrom-work"><a href="#How-does-withLatestFrom-work" class="headerlink" title="How does withLatestFrom work?"></a>How does <code>withLatestFrom</code> work?</h3><p>Can you guess who is the primary and who is the secondary in our case?</p><p>You guessed it! <code>color</code> is the primary while <code>logo</code> is the secondary. At first (only once), <code>color</code>(primary) will look for <code>logo</code>(secondary). Once the <code>logo</code>(secondary) has responded, <code>color</code>(primary) will take the lead. The log will get triggered whenever the next <code>color</code>(primary) value is changed. The <code>logo</code>(secondary) value changes will not trigger the console log.</p><pre class="line-numbers language-none"><code class="language-none">1. Ms. Color picks WHITE &lt;- nothing happen, waiting for secondary2. Mr. Logo picks FISH &lt;- secondary found, wait for the primary&#39;s command3. Ms. Color picks GREEN &lt;- log 01, primary says GREEN! So, GREEN + FISH4. Mr. Logo picks DOG5. Ms. Color picks RED &lt;- log 02, primary says RED! So, RED + DOG6. Mr. Logo picks BIRD7. Ms. Color picks BLUE &lt;- log 03 primary says BLUE! So, BLUE + BIRD</code></pre><h2 id="forkJoin"><a href="#forkJoin" class="headerlink" title="forkJoin"></a>forkJoin</h2><p>I call <code>forkJoin</code> operator the final destination operator because they only commit once all parties are completely true.</p><p>Let’s replace the code in part 3 with the following code:</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">&#x2F;&#x2F; 3. We are ready to start printing shirt...forkJoin(color$, logo$)    .subscribe(([color, logo]) &#x3D;&gt; console.log(&#96;$&#123;color&#125; shirt with $&#123;logo&#125;&#96;));</code></pre><p>The shirt printing result would be:<br><img src="https://scotch-res.cloudinary.com/image/upload/q_auto:good,f_auto/media/272/r5PfUUWCQmubdxXlWa9C_fork-join-nothing.png" alt="forkJoin - printed shirts"></p><p>You will notice that nothing is logged in the console.</p><p>In our code, both <code>color</code> and <code>logo</code> observables are not complete. We can keep pushing value by calling <code>.next</code> - that means they are not serious enough and thus they are not <code>final destination</code> of each other.</p><p>To be serious, we need to <code>complete</code> both observables. Replace the code in part 5 with the following:</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">&#x2F;&#x2F; 5. When the two persons(observables) ...color$.complete();logo$.complete();</code></pre><p>With the above code changes, Here is our shirt printing result:</p><p><img src="https://scotch-res.cloudinary.com/image/upload/q_auto:good,f_auto/media/272/OQzlcACSVekxWgkuq30A_forkjoin.gif" alt="forkJoin (complete) - printed shirts"></p><p>This is what is logged to the console:</p><pre class="line-numbers language-none"><code class="language-none">1. blue shirt with bird</code></pre><p>Here is the sequence of the log:</p><pre class="line-numbers language-none"><code class="language-none">1. Ms. Color picks WHITE2. Mr. Logo picks FISH3. Ms. Color picks GREEN4. Mr. Logo picks DOG5. Ms. Color picks RED6. Mr. Logo picks BIRD7. Ms. Color picks BLUE8. Ms. Color completed &lt;-- color is serious!9. Mr. Logo completed &lt;--- log no 01, both logo &amp; color are completed. Final destination!</code></pre><p>There is more than one way to complete observables. There are operators that allow you to auto-complete observables when conditions are met, for example <a href="https://rxjs-dev.firebaseapp.com/api/operators/take">take</a>, <a href="https://rxjs-dev.firebaseapp.com/api/operators/takeUntil">takeUntil</a>, and <a href="https://rxjs-dev.firebaseapp.com/api/operators/first">first</a>.</p><p>Let’s say you only want to make one shirt; you only need to know the first <code>color</code> and <code>logo</code>. In this case, you don’t care about the rest of the info that Ms. Color &amp; Mr. Logo provide. You can make use of the <code>take</code> or <code>first</code> operator to achieve auto-complete observables once the first <code>color</code> and <code>logo</code> emit.</p><p>Replace part 3 of the code with the following:</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">&#x2F;&#x2F; 3. We are ready to start printing shirt...const firstColor$ &#x3D; color$.pipe(take(1));const firstLogo$ &#x3D; logo$.pipe(first());forkJoin(firstColor$, firstLogo$)    .subscribe(([color, logo]) &#x3D;&gt; console.log(&#96;$&#123;color&#125; shirt with $&#123;logo&#125;&#96;));</code></pre><p> You can remove all the code in part 5 as well. We don’t need the two lines <code>.complete()</code> (as previous code) because <code>take</code> and <code>first</code> will auto-complete the observable when the is condition met.</p><p>With the above change, you should see a <strong>white shirt with fish</strong>:</p><p><img src="https://res.cloudinary.com/scotch/image/upload/v1536601852/1ZfLavc7RnueTUAAvzFS_white_1_eesrye.png" alt="forkjoin (auto complete) - printed shirtst"></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Here is the summary of all results:<br><img src="https://res.cloudinary.com/scotch/image/upload/v1536601871/TZ78oYErQpOU3bFG9krs_Untitled_20design_20_1_20_1_m1fwev.png" alt="one page answer"></p><p>In summary, these four operators trigger the next action (subscribe function in our case) in slightly different conditions.</p><p>In some cases, the outcome of using different operators might be the same (that’s why people get confused on which one to use), it would be good to understand the intention of the operator &amp; decide accordingly.</p><p>One of the most common use cases of combination operators would be <strong>calling a few APIs, wait for all results return, then executing next logic</strong>. Either <code>forkJoin</code> or <code>zip</code> will work and return the same result because API calls are one-time only, auto-completed once result is returned (e.g. Angular <code>httpClient.get</code>).</p><p>However, by understanding the operators more, <code>forkJoin</code> might be more suitable in this case. It is because we “seriously” want to wait for all HTTP responses to complete before proceeding to the next step. <code>zip</code> is intended for observables with multiple emits. In our case, we expect only one emit for each HTTP request. Therefore, I think <code>forkJoin</code> is more appropriate.</p>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RxJS </tag>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
